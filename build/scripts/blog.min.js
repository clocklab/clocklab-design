// menu
document.addEventListener('DOMContentLoaded', () => {
    const openCloseBtns = document.querySelectorAll('.menu__item--open-close'),
          animationTime = 1600

    function openMenu (event) {
        event.preventDefault()

        const menu = this.parentElement
        const menuBackground = menu.querySelector('.menu__background')

        menu.classList.add('opened')
        document.body.style.overflow = 'hidden'

        this.removeEventListener('click', openMenu)

        function closeMenu (event) {
            event.preventDefault()
    
            menu.classList.remove('opened')
            menuBackground.removeEventListener('click', closeMenu)
            this.removeEventListener('click', closeMenu)
            document.body.removeAttribute('style')
    
            setTimeout(() => {
                this.addEventListener('click', openMenu)
            }, animationTime)
        }
        
        setTimeout(() => {
            this.addEventListener('click', closeMenu)
            menuBackground.addEventListener('click', closeMenu)
        }, animationTime)
    }

    openCloseBtns.forEach(openCloseBtn => {
        openCloseBtn.addEventListener('click', openMenu)  
    })
});

// horizontal-scroll-blog
document.addEventListener('DOMContentLoaded', () => {

    const frontLayer = document.querySelector('.blog .feed-container')

    let currentScrollLeft = 0
    let currentLeftPos

    const moveFrontLayer = newPos => {
        frontLayer.scrollLeft = currentScrollLeft + newPos
    }

    const moveObjects = () => {
        const newLeftPos = currentLeftPos - event.clientX
        
        moveFrontLayer(newLeftPos)
    }

    const removeEvents = () => {
        frontLayer.firstElementChild.removeAttribute('style')
        currentLeftPos = event.clientX
        currentScrollLeft = frontLayer.scrollLeft
        
        document.removeEventListener('mousemove', moveObjects)
        document.removeEventListener('mouseup', removeEvents)
    } 

    frontLayer.addEventListener('mousedown', event => {
        currentLeftPos = event.clientX
        currentScrollLeft = frontLayer.scrollLeft
        frontLayer.firstElementChild.style.cursor = '-webkit-grabbing'

        document.addEventListener('mousemove', moveObjects)
        document.addEventListener('mouseup', removeEvents)
    })
})

// transition-start
document.addEventListener('DOMContentLoaded', () => {

    const links = document.querySelectorAll('.blog .post-info a')

    links.forEach(link => {
        link.addEventListener('click', event => {
            event.preventDefault()
            
            const position = link.parentElement.parentElement.querySelector('img').getBoundingClientRect()
            const href = link.getAttribute('href')

            localStorage.setItem('position', JSON.stringify(
                {
                    'left': position.left,
                    'top': position.top,
                    'width': position.width,
                    'height': position.height
                }
            ))

            document.location.href = href
        })
    })
})