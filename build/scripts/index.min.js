// menu
document.addEventListener('DOMContentLoaded', () => {
    const openCloseBtns = document.querySelectorAll('.menu__item--open-close'),
          animationTime = 1600

    function openMenu (event) {
        event.preventDefault()

        const menu = this.parentElement
        const menuBackground = menu.querySelector('.menu__background')

        menu.classList.add('opened')
        document.body.style.overflow = 'hidden'

        this.removeEventListener('click', openMenu)

        function closeMenu (event) {
            event.preventDefault()
    
            menu.classList.remove('opened')
            menuBackground.removeEventListener('click', closeMenu)
            this.removeEventListener('click', closeMenu)
            document.body.removeAttribute('style')
    
            setTimeout(() => {
                this.addEventListener('click', openMenu)
            }, animationTime)
        }
        
        setTimeout(() => {
            this.addEventListener('click', closeMenu)
            menuBackground.addEventListener('click', closeMenu)
        }, animationTime)
    }

    openCloseBtns.forEach(openCloseBtn => {
        openCloseBtn.addEventListener('click', openMenu)  
    })
});

// clock
$(window).on('load', function() {
    
    // ----- clock -----
    (function() {
      initLocalClocks();
      moveSecondHands();
      setUpMinuteHands();
    })();
});

// устанавливает точку отсчета любых часов в соответствии с местным временем пользователя
function initLocalClocks() {

    // узнать местное время с помощью JS
    var date = new Date;
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();

    // создать объект, хранящий все стрелки и их углы в градусах
    var hands = [
        {
            hand: 'hours',
            angle: (hours * 30) + (minutes / 2)
        },
        {
            hand: 'minutes',
            angle: (minutes * 6)
        },
        {
            hand: 'seconds',
            angle: (seconds * 6)
        }
    ];

    // с помощью цикла установить угол для каждой из стрелок
    for (var j = 0; j < hands.length; j++) {
        var elements = document.querySelectorAll('.' + hands[j].hand);
        
        for (var k = 0; k < elements.length; k++) {
            elements[k].style.webkitTransform = 'rotateZ('+ hands[j].angle + 'deg)';
            elements[k].style.transform = 'rotateZ('+ hands[j].angle + 'deg)';

            // если это минутная стрелка, сохранить положение секундной стрелки (для дальнейшего расчета положения минутной стрелки)
            if (hands[j].hand === 'minutes') {
                elements[k].parentNode.setAttribute('data-second-angle', hands[j + 1].angle);
            }
        }
    }
}

// установить таймаут для первого движения минутной стрелки (меньше 1 минуты), после чего поворачивать ее каждую минуту
function setUpMinuteHands() {

    // вычислить, сколько секунд прошло с начала этой минуты
    var containers = document.querySelectorAll('.minutes-container');
    var secondAngle = containers[0].getAttribute("data-second-angle");
    if (secondAngle > 0) {
        
        // установить таймаут до конца текущей минуты, чтобы передвинуть стрелку
        var delay = (((360 - secondAngle) / 6) + 0.1) * 1000;

        setTimeout(function() {
            moveMinuteHands(containers);
        }, delay);
    }
}

// выполнить первый поворот минутной стрелки
function moveMinuteHands(containers) {
    for (var i = 0; i < containers.length; i++) {
        containers[i].style.webkitTransform = 'rotateZ(6deg)';
        containers[i].style.transform = 'rotateZ(6deg)';
    }

    // после этого продолжить с интервалом в 60 секунд
    setInterval(function() {
        for (var i = 0; i < containers.length; i++) {
            if (containers[i].angle === undefined) {
                containers[i].angle = 12;
            } else {
                containers[i].angle += 6;
            }
            containers[i].style.webkitTransform = 'rotateZ('+ containers[i].angle + 'deg)';
            containers[i].style.transform = 'rotateZ('+ containers[i].angle + 'deg)';
        }
    }, 60000);
}

// перемещение контейнера секундной стрелки
function moveSecondHands() {
    var containers = document.querySelectorAll('.seconds-container');

    setInterval(function() {
        for (var i = 0; i < containers.length; i++) {
            if (containers[i].angle === undefined) {
                containers[i].angle = 6;
            } else {
                containers[i].angle += 6;
            }
            containers[i].style.webkitTransform = 'rotateZ('+ containers[i].angle + 'deg)';
            containers[i].style.transform = 'rotateZ('+ containers[i].angle + 'deg)';
        }
    }, 1000);
}

// clock-bg
(function($) {

    $.textshadow = function(el, options) {
        var base = this;       
        base.$el = $(el);
        base.el = el;        
        base.$el.data("textshadow", base);

        var active = true;

        base.init = function(){            
            base.options = $.extend({}, $.textshadow.options, options);
            base.build();
        };

        base.build = function(){
            base.start();
        };

        base.clamp = function (x, min, max) {
            return Math.max(min, Math.min(max, x));
        };

        base.setoption = function (key, value) {
            if (typeof key === "string") {
                base.options[key] = value;
                if (key === 'color')
                    return base.update(base.sx, base.sy, base.fuzz);
            } else {
                base.options = $.extend(base.options, key);
            }
            base.mousemove(base);
        };

        base.start = function() {
            if (detectMobile() && ('DeviceOrientationEvent' in window)) {
                window.addEventListener("deviceorientation", base.deviceorientation, false);
                base.deviceorientation({ 'alpha': 0, 'beta': 0, 'gamma': 0 });
                window.addEventListener("resize", base.resize, false);
                base.portraitMode = true;
            } else {
                $(window).bind({ mousemove: base.mousemove });
                base.mousemove({ pageX: $(window).width() / 2, pageY: $(window).height() / 2 });
            }
            if (base.options.transparent) base.el.style.color = "transparent";
            base.update();
        };

        base.resize = function(){
            var aspect = $(window).height() / $(window).width();
            base.portraitMode = aspect >= 1;
        };

        base.deviceorientation = function (e) {
            if (e && 'beta' in e) {
                var b, g;
                if (base.portraitMode) {
                    b = e.beta;
                    g = e.gamma;
                } else {
                    b = e.gamma;
                    g = e.beta;
                }
                distance = Math.sqrt(b*b + g*g);
                if (base.options.xMax != null) base.sx = g / 90 * base.options.xMax;
                else                           base.sx = g / 90 * 50;
                if (base.options.yMax != null) base.sy = b / 90 * base.options.yMax;
                else                           base.sy = b / 90 * 50;
                if (base.options.fuzzMax != null)
                    base.fuzz = Math.min(Math.abs((distance / 90 * (base.options.fuzzMax - base.options.fuzzMin)) + base.options.fuzzMin), base.options.fuzzMax);
                else
                    base.fuzz = Math.abs((distance / 90 * (30 - base.options.fuzzMin)) + base.options.fuzzMin, 30);
                if (base.options.downwards)
                    base.sy = Math.abs(base.sy);
                    base.sx += base.options.xOffset;
                    base.sy += base.options.yOffset;
            }
        };

        base.mousemove = function (e){
            var offset = base.$el.offset(),
            x = e.pageX,
            y = e.pageY,
            cy = offset.top + base.$el.height() / 2,
            cx = offset.left + base.$el.width() / 2,
            dx = (cx - x),
            dy = (cy - y),
            sx = dx / base.options.xFactor,
            sy = dy / base.options.yFactor,
            distance = Math.sqrt(dx*dx + dy*dy),
            fuzz = distance / base.options.fuzz + base.options.fuzzMin;

            if (base.options.xMax != null) sx = base.clamp(sx, -1 * base.options.xMax, base.options.xMax);
            if (base.options.yMax != null) sy = base.clamp(sy, -1 * base.options.yMax, base.options.yMax);
            if (base.options.fuzzMax != null) fuzz = base.clamp(fuzz, base.options.fuzzMin, base.options.fuzzMax)

            sx += base.options.xOffset;
            sy += base.options.yOffset;
            base.pageX = x;
            base.pageY = y;
            base.sx = sx;
            base.sy = sy;
            base.fuzz = fuzz;
        };

        base.browsers = " -moz- -webkit- -ms-".split(" ");
        base.update = function (sx, sy, fuzz) {
            if (! active) return;
            requestAnimFrame(base.update);
            var val = base.sx + "px " + base.sy + "px " + base.fuzz + "px " + base.options.color;
            var prop = base.options.textShadow ? "text-shadow" : "box-shadow";
            var styles = {};
            for (var i in base.browsers) {
                styles[base.browsers[i] + prop] = val;
            }
            base.$el.css(styles);
        };

        base.pause = function(){
            active = false;
        };

        base.unpause = function(){
            if (! active) {
                active = true;
                base.update();
            }
        };

        base.init();
    };

    $.textshadow.options = { 
        color: '#888',
        xFactor: 30,
        fuzzMax: 30,
        fuzzMin: 0,
        xOffset: 0,
        fuzz: 40,
        yMax: 30,
        yOffset: 0,
        yFactor: 30,
        downwards: true,
        textShadow: false,
        transparent: false
    };
  
    $.fn.textshadow = function(options){
        return this.each(function(){
            (new $.textshadow(this, options));            
        });
    };
  
    window.requestAnimFrame = (function(){
        return window.requestAnimationFrame    || 
            window.webkitRequestAnimationFrame || 
            window.mozRequestAnimationFrame    || 
            window.oRequestAnimationFrame      || 
            window.msRequestAnimationFrame     || 
            function( callback ){
                window.setTimeout(callback, 1000 / 60);
            };
    })();

    function detectMobile () {
        return navigator.userAgent.indexOf("Mobile") !== -1 || navigator.userAgent.indexOf("Android") !== -1;
    }

    // ----- block-bg -----
    $('#clock-bg').textshadow({
        color: 'rgba(0,0,0,.05)',
        textShadow: true
    });
})(jQuery);

// home clock-bg
document.addEventListener('DOMContentLoaded', () => {
    $('#clock-bg').textshadow({
        color: 'rgba(0,0,0,.05)',
        textShadow: true
    });
});

// slides-changing
document.addEventListener('DOMContentLoaded', () => {
    
    const slides = Array.prototype.slice.call( document.querySelectorAll('.screen-block'))
    const events = ['wheel', 'scroll', 'keydown']
    const animationTime = 1000
    let freezer
    let flag = true
    
    const addListeners = () => events.forEach(event => document.addEventListener(event, freezeEvents))

    const freezeEvents = () => {
        if (flag) {
            move()
            flag = !flag
        }

        freezer && clearTimeout(freezer)

        freezer = setTimeout(() => {
            flag = !flag
        }, animationTime)
    }

    const moveToNext = index => {
        slides[index + 1]
        ? slides[index + 1].classList.add('current') 
        : slides[0].classList.add('current')
    }
    
    const moveToPrevious = (index) => {
        slides[index - 1]
        ? slides[index - 1].classList.add('current')
        : slides[slides.length - 1].classList.add('current')
    }
    
    const move = () => {
        const previousSlide = document.querySelector('.screen-block.previous');
        const currentSlide = document.querySelector('.screen-block.current');
        const index = slides.indexOf(currentSlide);
        
        if (event.deltaY < 0 || event.keyCode === 40) {
            previousSlide && previousSlide.classList.remove('previous');
            currentSlide.classList.remove('current');
            currentSlide.classList.add('previous');  

            moveToNext(index)
        }

        if (event.deltaY > 0 || event.keyCode === 38) {
            previousSlide && previousSlide.classList.remove('previous');
            currentSlide.classList.remove('current');
            currentSlide.classList.add('previous');  

            moveToPrevious(index)
        }
    }
    
    addListeners()
    
    slides[0].classList.add('current')
})

// slides changing mobile
document.addEventListener('DOMContentLoaded', () => {
    const blocks = Array.prototype.slice.call(document.querySelectorAll('.screen-block'))
    const pageHeight = document.body.offsetHeight
    const dif = 0

    const scrollCheck = () => {
        const blocksTopPos = blocks.map(block => block.getBoundingClientRect().top)

        blocksTopPos.forEach((topPos, index) => {
            topPos < (pageHeight + dif) &&
            blocks[index].classList.add('current-slide')
        })
    }

    document.addEventListener('scroll', scrollCheck)

    scrollCheck()
})

// open long text
document.addEventListener('DOMContentLoaded', () => {
    const openButtons = document.querySelectorAll('.open-long-text')
    const closeButtons = document.querySelectorAll('.close-long-text')

    openButtons.forEach(openButton => {
        openButton.addEventListener('click', () => {
            openButton.parentElement.classList.add('open')
        })
    })

    closeButtons.forEach(closeButton => {
        closeButton.addEventListener('click', () => {
            closeButton.parentElement.parentElement.classList.remove('open')
            closeButton.parentElement.parentElement.parentElement.parentElement.classList.remove('open')
        })
    })
})

// big background letter
document.addEventListener('DOMContentLoaded', () => {
    const selectors = ['.euro-club', '#clock', '#service-two', '#blog-two', '#blog-three', '#main-contacts', '#contacts', '#services', '#about-company-four']

    const move = selectors => {

        selectors.forEach(selector => {

            const parent = document.querySelector(selector),
                  letter = document.querySelector(`${selector} .big-background-letter`),
                  koef = 10

            parent && parent.addEventListener('mousemove', event => {
                const allHeight = document.documentElement.clientHeight,
                      allWidth = document.documentElement.clientWidth,
                      currentXPos = event.clientX,
                      currentYPos = event.clientY

                const newX = - (allWidth / 2 - currentXPos) / koef,
                      newY = - (allHeight / 2 - currentYPos) / koef

                letter.style.transform = `translate3d(${newX}px, ${newY}px, 0)`
            })
        })
    }

    move(selectors)
})

// alta
document.addEventListener('DOMContentLoaded', () => {
    const bigGallerySlides = document.querySelectorAll('.alta-capital .image-container img'),
          nextGallerySlides = document.querySelectorAll('.alta-capital .slide-controls--next-slide img'),
          previousGallerySlides = document.querySelectorAll('.alta-capital .slide-controls--previous-slide img')

    const currentSlideText = document.querySelector('.alta-capital .indicators .current-slide'),
          startSlideIndex = 0

    const btnRight = document.querySelector('.alta-capital .slide-controls--next-slide'),
          btnLeft = document.querySelector('.alta-capital .slide-controls--previous-slide')

    const setSlide = (index, direction) => {
        const currentSlides = document.querySelectorAll('.alta-capital img.current'),
              previousSlides = document.querySelectorAll('.alta-capital img.previous'),
              nextGallerySlide = nextGallerySlides[index + 1] || nextGallerySlides[0]
              previousGallerySlide = previousGallerySlides[index - 1] || previousGallerySlides[previousGallerySlides.length - 1]

        currentSlideText.innerText = `${index + 1}`

        previousSlides && previousSlides.forEach(slide => slide.classList.remove('previous'))
        
        currentSlides.forEach(slide => slide.classList.remove('current', 'left', 'right'))
        currentSlides.forEach(slide => slide.classList.add('previous'))

        bigGallerySlides[index].classList.add('current');
        nextGallerySlide.classList.add('current');
        previousGallerySlide.classList.add('current');

        if (direction) {
            const apearDirection = direction === 'right'
            ? 'right'
            : 'left'

            bigGallerySlides[index].classList.add(apearDirection);
            nextGallerySlide.classList.add(apearDirection);
            previousGallerySlide.classList.add(apearDirection);
        }
    }

    setSlide(startSlideIndex)

    btnRight.addEventListener('click', () => {
        const currentIndex = parseInt(document.querySelector('.alta-capital .indicators .current-slide').innerText) - 1,
              newIndex = bigGallerySlides[currentIndex + 1]
              ? currentIndex + 1
              : 0

        bigGallerySlides[0].classList.contains('loaded') &&
        bigGallerySlides.forEach(slide => slide.classList.remove('loaded'))

        setSlide(newIndex, 'right') 
    })

    btnLeft.addEventListener('click', () => {
        const currentIndex = parseInt(document.querySelector('.alta-capital .indicators .current-slide').innerText) - 1,
              newIndex = bigGallerySlides[currentIndex - 1]
              ? currentIndex - 1
              : bigGallerySlides.length - 1

        bigGallerySlides[0].classList.contains('loaded') &&
        bigGallerySlides.forEach(slide => slide.classList.remove('loaded'))

        setSlide(newIndex, 'left') 
    })
});